package limonblaze.lootextra.loot.modifier.base;

import com.google.gson.JsonObject;
import limonblaze.lootextra.LootExtra;
import limonblaze.lootextra.loot.injector.base.LootInjectorType;
import net.minecraft.item.ItemStack;
import net.minecraft.loot.condition.LootCondition;
import net.minecraft.loot.context.LootContext;
import net.minecraft.util.Identifier;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents a modification to loots generated by ANY loot table when matching specified loot conditions.<br>
 * Applys on run time whenever loots are generated.<br>
 * Loot modfiers, as its name, does better on MODIFY instead of INJECT,
 * loot modifiers can't control the loot generation, instead, they are better at handling runtime events.<br>
 * Unlike {@link limonblaze.lootextra.loot.injector.base.LootInjector} who work on reload,
 * loot modifiers uses loot conditions specified in json object to control whether to modify or not.
 * It is also welcomed for subclasses to override the checking method and do their additional checks.*/
public abstract class LootModifier {
    public static final LootModifier EMPTY = new LootModifier(LootExtra.EMPTY_IDENTIER, new ArrayList<>()) {

        public LootModifierType<?> getType() {
            return LootModifierType.EMPTY;
        }

        public boolean isValid() {
            return false;
        }

        public List<ItemStack> modify(List<ItemStack> lootIn, LootContext context) {
            return lootIn;
        }

    };
    private final Identifier id;
    private final List<LootCondition> conditions;

    public LootModifier(Identifier id, List<LootCondition> conditions) {
        this.id = id;
        this.conditions = conditions;
    }

    public Identifier getId() {
        return this.id;
    }

    public abstract LootModifierType<?> getType();

    public abstract boolean isValid();

    public abstract List<ItemStack> modify(List<ItemStack> lootIn, LootContext context);

    public boolean shouldApply(LootContext context) {
        for(LootCondition condition : this.conditions) {
            if(!condition.test(context)) return false;
        }
        return true;
    }

    public interface Serializer<T extends LootModifier> {

        T fromJson(Identifier id, JsonObject json, List<LootCondition> conditions);

    }
}
